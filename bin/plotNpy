#!/home/joseph/anaconda3/envs/imageProcessing/bin/python3
'''
Plot npy files
'''

import sys
import warnings
import argparse
import matplotlib.pyplot as plt
import numpy as np

warnings.filterwarnings( "ignore")

def get_title(
    index: int,
    img: np.ndarray,
    num: int,
    limits: bool,
    stats: bool,
    offset: int,
    enable_index: bool=False
    ):
    '''
    Generate the size and the title of the image
    '''
    if enable_index:
        title = f"index: {index+offset}"
    else:
        title = ''
    size = 12
    if num > 5:
        size = 9
    if limits:
        title +=f"\nmin: {round(np.min(img), 3)}, max: {round(np.max(img), 3)}"
    if stats:
        avg = np.average(img)
        med = np.median(img)
        title +=f"\navg: {round(avg, 3):0.3f}, med: {round(med, 3):0.3f},\n shape: {img.shape}"
    return size, title

def picshow(img, limits, stats, offset, titles=None, enable_index=True):
    num = len(img)
    ay = np.ceil(np.sqrt(num))
    ax = np.rint(np.sqrt(num))
    fig = plt.figure(figsize=(10,12))
    for i in range(num):
        im = img[i]
        titleSize, title = get_title(
            i,
            im,
            num,
            limits=limits,
            stats=stats,
            offset=offset,
            enable_index=enable_index,
            )
        if titles != None:
            title = title +'\n'+titles[i]
        sub = fig.add_subplot(int(ax), int(ay), int(i+1))
        sub.set_title(title, size=titleSize)
        sub.axis('off')
        if len(im.shape) == 3:
            im = im[:, :, 0]
        if np.amax(im) < 10 or np.amax(im) > 256:
            plt.imshow(im, cmap='jet', interpolation='nearest')
        else:
            plt.imshow(im, cmap='jet', interpolation='nearest', vmin=0, vmax=255)

def plot(imagePaths, limits=False, stats=False, offset=0, imageNames=None,
        enable_index=True):
    images = []
    for i in range(len(imagePaths)):
        images.append(np.load(imagePaths[i]))
    picshow(images, limits=limits, stats=stats, offset=offset,
            titles=imageNames, enable_index=enable_index)
    plt.show()

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('img_file_paths', nargs='+')
    parser.add_argument('--no-index', dest='no_index', action='store_true', default=False)
    parser.add_argument('--limits', action='store_true', default=False)
    parser.add_argument('--stats', action='store_true', default=False)
    parser.add_argument('--offset', type=int, default=0)
    args = parser.parse_args()
    plot(
        args.img_file_paths,
        limits=args.limits,
        stats=args.stats,
        offset=args.offset,
        enable_index=not args.no_index
    )
