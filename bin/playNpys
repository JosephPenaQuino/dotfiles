#!/home/joseph/anaconda3/envs/imageProcessing/bin/python3
'''Play successive numpy'''

import time
import argparse
import numpy as np
import cv2


def show(init, quantity, save=False, color=False, rotate=False,
        interpolation='nearest', size='0 0'):
    '''Play video'''
    if size == '0 0':
        size = np.load(f'im_{init:04d}.npy').shape
    else:
        size = (int(size.split()[0]), int(size.split()[1]))
    if save:
        fourcc = cv2.VideoWriter_fourcc(*'XVID')
        out = cv2.VideoWriter('vid.avi', fourcc, 1, size)
    for i in range(init, init+quantity):
        img = np.load(f'im_{i:04d}.npy')
        if rotate:
            img = np.rot90(img)
        if img.shape != size:
            print('resize=True')
            if interpolation == 'nearest':
                img = cv2.resize(img, size, interpolation=cv2.INTER_NEAREST)
            elif interpolation == 'cubic':
                img = cv2.resize(img, size, interpolation=cv2.INTER_CUBIC)

        if img.dtype != np.uint8:
            img = np.interp(img, (0, 550), (0, 255)).astype(np.uint8)
        if color:
            img = cv2.applyColorMap(img, cv2.COLORMAP_JET)
        if save:
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            out.write(img)
        else:
            cv2.imshow('my video', img)
            time.sleep(0.5)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break  # esc to quit
    if save:
        out.release()
    else:
        cv2.destroyAllWindows()


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'initial',
        help=('The number of the first image to be read. eg: 10 from '
              'im_0010.npy'),
        type=int)
    parser.add_argument(
        'quantity',
        help=('The quantity of images that are to be read. eg: 10 to read from'
              'im_0010.npy until im_0019.npy'),
        type=int)
    parser.add_argument(
        '-s',
        '--saveVideo',
        help='Save video instead of playing it',
        action='store_true',
        default=False)
    parser.add_argument(
        '-n',
        '--interpolation',
        help='Choose interpolation type: nearest | cubic',
        default='nearest')
    parser.add_argument(
        '-r',
        '--rotate',
        help='Rotate video',
        action="store_true",
        default=False)
    parser.add_argument(
        '-S',
        '--size',
        help='New size',
        default='0 0')
    args = parser.parse_args()
    show(
        init=args.initial,
        quantity=args.quantity,
        save=args.saveVideo,
        rotate=args.rotate,
        interpolation=args.interpolation,
        size=args.size,
        )
